class Polinomio:
    def __init__(self, coefs):        #recebe uma lista com os coeficientes na ordem INVERSA: [5, 1, -2, 0, -3] equivale ao polinomio - 3*x^4 - 2*x^2 + 1*x^1 + 5
        # list --> None
        
        self.c = coefs[:]
        
        isnull = True
        for i in self.c:
            if i != 0:
                self.g = self.coeficientes()
                isnull = False
        if isnull:
            self.g = [0]
            
    def __str__(self):        #funcao print da classe, constroi a escrita usual de um polinomio a partir da interpretacao da lista
        o = ''
        ini = True
        for i in range(len(self.c)-1, -1, -1):
            if i == 0:
                if self.c[i] > 0:
                    if ini:
                        o += f'{self.c[i]}'
                        ini = False
                    else:
                        o += f' + {self.c[i]}'
                    return o
                if self.c[i] < 0:
                    o += f' - {-self.c[i]}'
                    ini = False
                    return o
            elif self.c[i] > 0:
                if ini:
                    o += f'{self.c[i]}*x^{i}'
                    ini = False
                else:
                    o += f' + {self.c[i]}*x^{i}'
                    ini = False
            elif self.c[i] < 0:
                o += f' - {-self.c[i]}*x^{i}'
                ini = False
            
        if o == '':
            return '0'
        return o
        
    def coeficientes(self):       #retorna os coeficientes do polinomio a partir da lista
        
        for i in range(len(self.c)):
            if self.c[i] != 0:
                self.g = self.c[:i+1]
                
        return self.g
    
    def grau(self):       #retorna o grau do polinomio
        return len(self.g) - 1
    
    def derive(self):     #retorna a derivada do polinomio
        dp = []
        for i in range(len(self.g)):
            dp += [i * self.g[i]]
            
        if dp[0] == 0:
            dp = dp[1:]
            
        return Polinomio(dp)
    
    def __call__(self, x):      #retorna o valor de uma chamada com determinado
        # float --> float
        
        calc = 0
        for i in range(len(self.g)):
            calc += self.g[i]*x**i
        return calc
    
    def __add__(self, other):
        # (int, list) --> Polinomio
        s = []
        
        if type(other) in [int, float]:
            s = self.g[:]
            s[0] += other
            return Polinomio(s)
        
        o = other.coeficientes()
        
        if len(self.g) > len(other.g):
            for i in range(len(o)):
                s += [self.g[i] + other.g[i]]
                
            s += self.g[len(o):]
            return Polinomio(s)
        
        elif len(self.g) < len(other.g):
            for i in range(len(self.g)):
                s += [self.g[i] + o[i]]
            
            s += o[len(self.g):]
            return Polinomio(s)
        
        else:
            for i in range(len(o)):
                s += [self.g[i] + o[i]]
            
            return Polinomio(s)
        
    def __radd__(self, other):  #inverso de __add__
      
        s = self.g[:]
        s[0] += other
        return Polinomio(s)
    
    def __sub__(self, other):
        s = []
        
        if type(other) in [int, float]:
            s = self.g[:]
            s[0] -= other
            return Polinomio(s)
        
        o = other.coeficientes()
        
        if len(self.g) > len(other.g):
            for i in range(len(o)):
                s += [self.g[i] - o[i]]
                
            s += self.g[len(o):]
            return Polinomio(s)
        
        elif len(self.g) < len(other.g):
            for i in range(len(self.g)):
                s += [self.g[i] - o[i]]
            
            t = [x*-1 for x in o[len(self.g):]]
            
            s += t
            return Polinomio(s)
        
        else:
            
            if self.g == other.g:
                
                return Polinomio([0]*len(self.g))
            else:
                for i in range(len(self.g)):
                    s += [self.g[i] - o[i]]
                return Polinomio(s)
        
    def __mul__(self, other):
        s = self.g[:]
        
        if type(other) in [int, float]:
            for i in range(len(s)):
                s[i] *= other
            return Polinomio(s)
        
        o = other.g[:]
        p = [0] * (len(s) + len(o))
        for i in range(len(s)):
            for j in range(len(o)):
                p[i+j] += s[i] * o[j]
          
        return Polinomio(p)
        
    def __rmul__(self, other):
        s = self.g[:]
        for i in range(len(s)):
            s[i] *= other
        return Polinomio(s)
        
